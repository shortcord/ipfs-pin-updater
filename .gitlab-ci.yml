stages:
    - build
    - package
    - deploy
variables:
  GIT_SUBMODULE_STRATEGY: recursive
build-standalone:
  stage: build
  image:
    name: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - | 
      dotnet publish \
      --configuration Release \
      --runtime linux-x64 \
      --self-contained \
      -p:PublishSingleFile=true \
      -p:PublishReadyToRun=true \
      -p:DebugType=embedded \
      --output publish_output
  artifacts:
    name: "ipfs-pin-util-linux_x64"
    paths:
      - publish_output/*
    expire_in: 1 week
    when: on_success
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
build-pkg-debian:
  stage: build
  image:
    name: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - |
      dotnet publish \
      --configuration Release \
      --runtime linux-x64 \
      --self-contained \
      -p:PublishSingleFile=true \
      -p:PublishReadyToRun=true \
      -p:DebugType=embedded \
      -p:DefineConstants="PKG_BUILD" \
      --output publish_output_pkg
    - |
      cp -v publish_output_pkg/ipfs-pin-util package/usr/bin/ipfs-pin-util
      cp -v src/appsettings.pkg.json package/etc/ipfs-pin-updater/appsettings.json
      cp -v src/appsettings.custom.json-example package/etc/ipfs-pin-updater/appsettings.custom.json-example
      cp -v control.template package/DEBIAN/control.template
      find package/ -name .gitkeep -print -delete
  artifacts:
    name: "ipfs-pin-util-linux_x64-debsrc"
    paths:
      - package/*
    expire_in: 1 week
    when: on_success
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
package-pkg-deb:
  variables:
    GIT_STRATEGY: none
  stage: package
  needs:
    - "build-pkg-debian"
  dependencies:
    - "build-pkg-debian"
  image:
    name: debian:11
  before_script:
    - apt update -y
    # Needed for envsubst
    - apt install -y gettext
  script:
    - cat package/DEBIAN/control.template | DEB_VERSION=$(TZ=UTC date +'%Y%m%d-%H%M') envsubst > package/DEBIAN/control
    - rm package/DEBIAN/control.template
    - mkdir /package deb-build
    - cp -rv package/* /package
    - find /package -name '.gitkeep' -type f -delete
    - dpkg-deb --build /package/ deb-build/
  artifacts:
    name: "ipfs-pin-util-linux_x64-deb"
    paths:
      - deb-build/*
    expire_in: 1 week
    when: on_success
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
merge-request-test:
  stage: build
  image:
    name: mcr.microsoft.com/dotnet/sdk:6.0
  script:
    - | 
      dotnet publish \
      --configuration Release \
      --runtime linux-x64 \
      --self-contained \
      -p:PublishSingleFile=true \
      -p:PublishReadyToRun=true \
      -p:DebugType=embedded \
      --output publish_output
  artifacts:
    name: "ipfs-pin-util-linux_x64"
    paths:
      - publish_output/*
    expire_in: 1 week
    when: on_success
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
deploy:
  variables:
    GIT_STRATEGY: none
  needs:
    - "package-pkg-deb"
  dependencies:
    - "package-pkg-deb"
  stage: deploy
  image:
    name: debian:11
  before_script:
    - apt update -y
    - apt install -y curl lsb-release gpg
    - curl https://raw.githubusercontent.com/deb-s3/deb-s3/master/deb-s3-archive-keyring.gpg > /etc/apt/trusted.gpg.d/deb-s3-archive-keyring.gpg
    - echo "deb http://deb-s3-repo.s3.us-east-2.amazonaws.com/$(lsb_release -is | tr A-Z a-z) $(lsb_release -cs) main" > /etc/apt/sources.list.d/deb-s3.list
    - apt update -y
    - apt install -y deb-s3
  script:
    - gpg --allow-secret-key-import --import "${GPG_SEC_FILE}"
    - gpg --list-keys
    - |
      deb-s3 \
      upload /deb-build/*.deb \
      --sign="${GPG_KEY_ID}" \
      --access-key-id="${AWS_ACCESS_KEY_ID}" \
      --secret-access-key="${AWS_SECRET_ACCESS_KEY}" \
      --endpoint="${AWS_ENDPOINT}" \
      --bucket "${AWS_BUCKET_NAME}"